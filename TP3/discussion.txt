Le patron du constructeur a été choisi pour effectuer la fabrication des Crafts, car leur fabrication est quelle que peu complexe puisque les crafts sont composés de sections qui sont elles-même composées de sièges ou de cabines. En apppliquant le patron du constructeur, on encapsule la création des crafts et n'avons pas à toucher à la fabrique si la composition des crafts vient à changer.
L'implémentation du patron de commande nous permet de respecter de respecter l'OCP en déplaçant toutes les méthodes qui se trouvaient auparavant dans la classe admin vers des classes utilisant l'interface AdminCommand. Cela fait en sorte que si l'on veut rajouter de nouvelles commandes, il n'est plus nécessaire de toucher à la classe admin et on évite d'avoir des dizaines de méthodes dans une seule classe comme c'était le cas dans l'itération précédente du projet.
L'utilisation du patron d'état nous permet de ne pas avoir à implémenter plusieurs fonctionnalités pour une méthode updateState de la classe Seats. 
L'utilisation du patron de memento nous sert à enregistrer les modifications apportées au système par l'administrateur. À chaque opération, un mémento est créé et la commande RestoreCommand restore le dernier mémento créé.
L'utilisation du patron de Fabrique fait en sorte que nous pouvons déléguer la création des Crafts, Company, Station et Route à une classe séparée de l'administration, ce qui nous permet de réduire le couplage en l'administration et ces classes.
