/** Generated by YAKINDU Statechart Tools code generator. */
package microwave.microwave;

import microwave.ITimer;

public class MicrowaveStatemachine implements IMicrowaveStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private SCInterfaceOperationCallback operationCallback;
		
		public void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean high;
		
		
		public void raiseHigh() {
			high = true;
			runCycle();
		}
		
		private boolean low;
		
		
		public void raiseLow() {
			low = true;
			runCycle();
		}
		
		private boolean digit;
		
		private long digitValue;
		
		
		public void raiseDigit(final long value) {
			digitValue = value;
			digit = true;
			runCycle();
		}
		protected long getDigitValue() {
			if (! digit ) 
				throw new IllegalStateException("Illegal event value access. Event Digit is not raised!");
			return digitValue;
		}
		
		private boolean timer;
		
		
		public void raiseTimer() {
			timer = true;
			runCycle();
		}
		
		private boolean start;
		
		
		public void raiseStart() {
			start = true;
			runCycle();
		}
		
		private boolean stop;
		
		
		public void raiseStop() {
			stop = true;
			runCycle();
		}
		
		private boolean open;
		
		
		public void raiseOpen() {
			open = true;
			runCycle();
		}
		
		private boolean close;
		
		
		public void raiseClose() {
			close = true;
			runCycle();
		}
		
		private long power;
		
		public long getPower() {
			return power;
		}
		
		public void setPower(long value) {
			this.power = value;
		}
		
		protected void clearEvents() {
			high = false;
			low = false;
			digit = false;
			timer = false;
			start = false;
			stop = false;
			open = false;
			close = false;
		}
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		microwave_Init,
		microwave_Operation,
		microwave_Operation_TempStatus_High,
		microwave_Operation_TempStatus_Low,
		microwave_Operation_TempStatus_TempSlection,
		microwave_Operation_TempStatus_Timer,
		microwave_Operation_TempStatus_Timer_r1_TimeSelection,
		microwave_Operation_TempStatus_Timer_r1_TimerEntry,
		microwave_Operation_TempStatus_Countdown,
		microwave_Operation_TempStatus_StartCooking,
		microwave_Operation_TempStatus_WaitForClosedDoor,
		microwave_Operation_TempStatus_WaitForStart,
		microwave_Operation_TempStatus_Beeping,
		microwave_Operation_TempStatus_Finished,
		microwave_Operation_DoorStatus_DoorClosed,
		microwave_Operation_DoorStatus_DoorOpen,
		$NullState$
	};
	
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private long time;
	
	protected long getTime() {
		return time;
	}
	
	protected void setTime(long value) {
		this.time = value;
	}
	
	
	private long timeMultiplier;
	
	protected long getTimeMultiplier() {
		return timeMultiplier;
	}
	
	protected void setTimeMultiplier(long value) {
		this.timeMultiplier = value;
	}
	
	
	private long doorState;
	
	protected long getDoorState() {
		return doorState;
	}
	
	protected void setDoorState(long value) {
		this.doorState = value;
	}
	
	
	public MicrowaveStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setPower(0);
		
		setTime(0);
		
		setTimeMultiplier(0);
		
		setDoorState(0);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_Microwave_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case microwave_Init:
				microwave_Init_react(true);
				break;
			case microwave_Operation_TempStatus_High:
				microwave_Operation_TempStatus_High_react(true);
				break;
			case microwave_Operation_TempStatus_Low:
				microwave_Operation_TempStatus_Low_react(true);
				break;
			case microwave_Operation_TempStatus_TempSlection:
				microwave_Operation_TempStatus_TempSlection_react(true);
				break;
			case microwave_Operation_TempStatus_Timer_r1_TimeSelection:
				microwave_Operation_TempStatus_Timer_r1_TimeSelection_react(true);
				break;
			case microwave_Operation_TempStatus_Timer_r1_TimerEntry:
				microwave_Operation_TempStatus_Timer_r1_TimerEntry_react(true);
				break;
			case microwave_Operation_TempStatus_Countdown:
				microwave_Operation_TempStatus_Countdown_react(true);
				break;
			case microwave_Operation_TempStatus_StartCooking:
				microwave_Operation_TempStatus_StartCooking_react(true);
				break;
			case microwave_Operation_TempStatus_WaitForClosedDoor:
				microwave_Operation_TempStatus_WaitForClosedDoor_react(true);
				break;
			case microwave_Operation_TempStatus_WaitForStart:
				microwave_Operation_TempStatus_WaitForStart_react(true);
				break;
			case microwave_Operation_TempStatus_Beeping:
				microwave_Operation_TempStatus_Beeping_react(true);
				break;
			case microwave_Operation_TempStatus_Finished:
				microwave_Operation_TempStatus_Finished_react(true);
				break;
			case microwave_Operation_DoorStatus_DoorClosed:
				microwave_Operation_DoorStatus_DoorClosed_react(true);
				break;
			case microwave_Operation_DoorStatus_DoorOpen:
				microwave_Operation_DoorStatus_DoorOpen_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_Microwave();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case microwave_Init:
			return stateVector[0] == State.microwave_Init;
		case microwave_Operation:
			return stateVector[0].ordinal() >= State.
					microwave_Operation.ordinal()&& stateVector[0].ordinal() <= State.microwave_Operation_DoorStatus_DoorOpen.ordinal();
		case microwave_Operation_TempStatus_High:
			return stateVector[0] == State.microwave_Operation_TempStatus_High;
		case microwave_Operation_TempStatus_Low:
			return stateVector[0] == State.microwave_Operation_TempStatus_Low;
		case microwave_Operation_TempStatus_TempSlection:
			return stateVector[0] == State.microwave_Operation_TempStatus_TempSlection;
		case microwave_Operation_TempStatus_Timer:
			return stateVector[0].ordinal() >= State.
					microwave_Operation_TempStatus_Timer.ordinal()&& stateVector[0].ordinal() <= State.microwave_Operation_TempStatus_Timer_r1_TimerEntry.ordinal();
		case microwave_Operation_TempStatus_Timer_r1_TimeSelection:
			return stateVector[0] == State.microwave_Operation_TempStatus_Timer_r1_TimeSelection;
		case microwave_Operation_TempStatus_Timer_r1_TimerEntry:
			return stateVector[0] == State.microwave_Operation_TempStatus_Timer_r1_TimerEntry;
		case microwave_Operation_TempStatus_Countdown:
			return stateVector[0] == State.microwave_Operation_TempStatus_Countdown;
		case microwave_Operation_TempStatus_StartCooking:
			return stateVector[0] == State.microwave_Operation_TempStatus_StartCooking;
		case microwave_Operation_TempStatus_WaitForClosedDoor:
			return stateVector[0] == State.microwave_Operation_TempStatus_WaitForClosedDoor;
		case microwave_Operation_TempStatus_WaitForStart:
			return stateVector[0] == State.microwave_Operation_TempStatus_WaitForStart;
		case microwave_Operation_TempStatus_Beeping:
			return stateVector[0] == State.microwave_Operation_TempStatus_Beeping;
		case microwave_Operation_TempStatus_Finished:
			return stateVector[0] == State.microwave_Operation_TempStatus_Finished;
		case microwave_Operation_DoorStatus_DoorClosed:
			return stateVector[1] == State.microwave_Operation_DoorStatus_DoorClosed;
		case microwave_Operation_DoorStatus_DoorOpen:
			return stateVector[1] == State.microwave_Operation_DoorStatus_DoorOpen;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseHigh() {
		sCInterface.raiseHigh();
	}
	
	public void raiseLow() {
		sCInterface.raiseLow();
	}
	
	public void raiseDigit(long value) {
		sCInterface.raiseDigit(value);
	}
	
	public void raiseTimer() {
		sCInterface.raiseTimer();
	}
	
	public void raiseStart() {
		sCInterface.raiseStart();
	}
	
	public void raiseStop() {
		sCInterface.raiseStop();
	}
	
	public void raiseOpen() {
		sCInterface.raiseOpen();
	}
	
	public void raiseClose() {
		sCInterface.raiseClose();
	}
	
	public long getPower() {
		return sCInterface.getPower();
	}
	
	public void setPower(long value) {
		sCInterface.setPower(value);
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_Microwave_Init() {
		sCInterface.operationCallback.clearDisplay();
		
		sCInterface.operationCallback.closeDoor();
		
		setDoorState(0);
		
		setTime(0);
		
		setTimeMultiplier(0);
		
		sCInterface.operationCallback.stopCook();
		
		sCInterface.operationCallback.display("test");
	}
	
	/* Entry action for state 'High'. */
	private void entryAction_Microwave_Operation_TempStatus_High() {
		sCInterface.operationCallback.display("High");
		
		sCInterface.setPower(1);
	}
	
	/* Entry action for state 'Low'. */
	private void entryAction_Microwave_Operation_TempStatus_Low() {
		sCInterface.operationCallback.display("Low");
		
		sCInterface.setPower(0);
	}
	
	/* Entry action for state 'TimerEntry'. */
	private void entryAction_Microwave_Operation_TempStatus_Timer_r1_TimerEntry() {
		setTime(((time * 10) + sCInterface.getDigitValue()));
		
		setTimeMultiplier(getTimeMultiplier() + 1);
		
		sCInterface.operationCallback.displayTime(getTime());
	}
	
	/* Entry action for state 'Countdown'. */
	private void entryAction_Microwave_Operation_TempStatus_Countdown() {
		timer.setTimer(this, 0, (1 * 1000), false);
		
		setTime((time - 1));
		
		sCInterface.operationCallback.displayTime(getTime());
	}
	
	/* Entry action for state 'StartCooking'. */
	private void entryAction_Microwave_Operation_TempStatus_StartCooking() {
		sCInterface.operationCallback.cook();
	}
	
	/* Entry action for state 'WaitForClosedDoor'. */
	private void entryAction_Microwave_Operation_TempStatus_WaitForClosedDoor() {
		sCInterface.operationCallback.stopCook();
		
		sCInterface.operationCallback.display("Waiting");
	}
	
	/* Entry action for state 'WaitForStart'. */
	private void entryAction_Microwave_Operation_TempStatus_WaitForStart() {
		sCInterface.operationCallback.displayTime(getTime());
	}
	
	/* Entry action for state 'Beeping'. */
	private void entryAction_Microwave_Operation_TempStatus_Beeping() {
		timer.setTimer(this, 1, (5 * 1000), false);
		
		sCInterface.operationCallback.display("Finished");
		
		sCInterface.operationCallback.beepOn();
	}
	
	/* Entry action for state 'Finished'. */
	private void entryAction_Microwave_Operation_TempStatus_Finished() {
		sCInterface.operationCallback.beepOff();
	}
	
	/* Entry action for state 'DoorClosed'. */
	private void entryAction_Microwave_Operation_DoorStatus_DoorClosed() {
		sCInterface.operationCallback.closeDoor();
		
		setDoorState(0);
	}
	
	/* Entry action for state 'DoorOpen'. */
	private void entryAction_Microwave_Operation_DoorStatus_DoorOpen() {
		sCInterface.operationCallback.openDoor();
		
		setDoorState(1);
	}
	
	/* Exit action for state 'Countdown'. */
	private void exitAction_Microwave_Operation_TempStatus_Countdown() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Beeping'. */
	private void exitAction_Microwave_Operation_TempStatus_Beeping() {
		timer.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_Microwave_Init_default() {
		entryAction_Microwave_Init();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Init;
	}
	
	/* 'default' enter sequence for state Operation */
	private void enterSequence_Microwave_Operation_default() {
		enterSequence_Microwave_Operation_TempStatus_default();
		enterSequence_Microwave_Operation_DoorStatus_default();
	}
	
	/* 'default' enter sequence for state High */
	private void enterSequence_Microwave_Operation_TempStatus_High_default() {
		entryAction_Microwave_Operation_TempStatus_High();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_High;
	}
	
	/* 'default' enter sequence for state Low */
	private void enterSequence_Microwave_Operation_TempStatus_Low_default() {
		entryAction_Microwave_Operation_TempStatus_Low();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_Low;
	}
	
	/* 'default' enter sequence for state TempSlection */
	private void enterSequence_Microwave_Operation_TempStatus_TempSlection_default() {
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_TempSlection;
	}
	
	/* 'default' enter sequence for state Timer */
	private void enterSequence_Microwave_Operation_TempStatus_Timer_default() {
		enterSequence_Microwave_Operation_TempStatus_Timer_r1_default();
	}
	
	/* 'default' enter sequence for state TimeSelection */
	private void enterSequence_Microwave_Operation_TempStatus_Timer_r1_TimeSelection_default() {
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_Timer_r1_TimeSelection;
	}
	
	/* 'default' enter sequence for state TimerEntry */
	private void enterSequence_Microwave_Operation_TempStatus_Timer_r1_TimerEntry_default() {
		entryAction_Microwave_Operation_TempStatus_Timer_r1_TimerEntry();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_Timer_r1_TimerEntry;
	}
	
	/* 'default' enter sequence for state Countdown */
	private void enterSequence_Microwave_Operation_TempStatus_Countdown_default() {
		entryAction_Microwave_Operation_TempStatus_Countdown();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_Countdown;
	}
	
	/* 'default' enter sequence for state StartCooking */
	private void enterSequence_Microwave_Operation_TempStatus_StartCooking_default() {
		entryAction_Microwave_Operation_TempStatus_StartCooking();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_StartCooking;
	}
	
	/* 'default' enter sequence for state WaitForClosedDoor */
	private void enterSequence_Microwave_Operation_TempStatus_WaitForClosedDoor_default() {
		entryAction_Microwave_Operation_TempStatus_WaitForClosedDoor();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_WaitForClosedDoor;
	}
	
	/* 'default' enter sequence for state WaitForStart */
	private void enterSequence_Microwave_Operation_TempStatus_WaitForStart_default() {
		entryAction_Microwave_Operation_TempStatus_WaitForStart();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_WaitForStart;
	}
	
	/* 'default' enter sequence for state Beeping */
	private void enterSequence_Microwave_Operation_TempStatus_Beeping_default() {
		entryAction_Microwave_Operation_TempStatus_Beeping();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_Beeping;
	}
	
	/* 'default' enter sequence for state Finished */
	private void enterSequence_Microwave_Operation_TempStatus_Finished_default() {
		entryAction_Microwave_Operation_TempStatus_Finished();
		nextStateIndex = 0;
		stateVector[0] = State.microwave_Operation_TempStatus_Finished;
	}
	
	/* 'default' enter sequence for state DoorClosed */
	private void enterSequence_Microwave_Operation_DoorStatus_DoorClosed_default() {
		entryAction_Microwave_Operation_DoorStatus_DoorClosed();
		nextStateIndex = 1;
		stateVector[1] = State.microwave_Operation_DoorStatus_DoorClosed;
	}
	
	/* 'default' enter sequence for state DoorOpen */
	private void enterSequence_Microwave_Operation_DoorStatus_DoorOpen_default() {
		entryAction_Microwave_Operation_DoorStatus_DoorOpen();
		nextStateIndex = 1;
		stateVector[1] = State.microwave_Operation_DoorStatus_DoorOpen;
	}
	
	/* 'default' enter sequence for region Microwave */
	private void enterSequence_Microwave_default() {
		react_Microwave__entry_Default();
	}
	
	/* 'default' enter sequence for region TempStatus */
	private void enterSequence_Microwave_Operation_TempStatus_default() {
		react_Microwave_Operation_TempStatus__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_Microwave_Operation_TempStatus_Timer_r1_default() {
		react_Microwave_Operation_TempStatus_Timer_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region DoorStatus */
	private void enterSequence_Microwave_Operation_DoorStatus_default() {
		react_Microwave_Operation_DoorStatus__entry_Default();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_Microwave_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Operation */
	private void exitSequence_Microwave_Operation() {
		exitSequence_Microwave_Operation_TempStatus();
		exitSequence_Microwave_Operation_DoorStatus();
	}
	
	/* Default exit sequence for state High */
	private void exitSequence_Microwave_Operation_TempStatus_High() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Low */
	private void exitSequence_Microwave_Operation_TempStatus_Low() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state TempSlection */
	private void exitSequence_Microwave_Operation_TempStatus_TempSlection() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Timer */
	private void exitSequence_Microwave_Operation_TempStatus_Timer() {
		exitSequence_Microwave_Operation_TempStatus_Timer_r1();
	}
	
	/* Default exit sequence for state TimeSelection */
	private void exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimeSelection() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state TimerEntry */
	private void exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimerEntry() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Countdown */
	private void exitSequence_Microwave_Operation_TempStatus_Countdown() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Operation_TempStatus_Countdown();
	}
	
	/* Default exit sequence for state StartCooking */
	private void exitSequence_Microwave_Operation_TempStatus_StartCooking() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitForClosedDoor */
	private void exitSequence_Microwave_Operation_TempStatus_WaitForClosedDoor() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitForStart */
	private void exitSequence_Microwave_Operation_TempStatus_WaitForStart() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Beeping */
	private void exitSequence_Microwave_Operation_TempStatus_Beeping() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_Microwave_Operation_TempStatus_Beeping();
	}
	
	/* Default exit sequence for state Finished */
	private void exitSequence_Microwave_Operation_TempStatus_Finished() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state DoorClosed */
	private void exitSequence_Microwave_Operation_DoorStatus_DoorClosed() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state DoorOpen */
	private void exitSequence_Microwave_Operation_DoorStatus_DoorOpen() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for region Microwave */
	private void exitSequence_Microwave() {
		switch (stateVector[0]) {
		case microwave_Init:
			exitSequence_Microwave_Init();
			break;
		case microwave_Operation_TempStatus_High:
			exitSequence_Microwave_Operation_TempStatus_High();
			break;
		case microwave_Operation_TempStatus_Low:
			exitSequence_Microwave_Operation_TempStatus_Low();
			break;
		case microwave_Operation_TempStatus_TempSlection:
			exitSequence_Microwave_Operation_TempStatus_TempSlection();
			break;
		case microwave_Operation_TempStatus_Timer_r1_TimeSelection:
			exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimeSelection();
			break;
		case microwave_Operation_TempStatus_Timer_r1_TimerEntry:
			exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimerEntry();
			break;
		case microwave_Operation_TempStatus_Countdown:
			exitSequence_Microwave_Operation_TempStatus_Countdown();
			break;
		case microwave_Operation_TempStatus_StartCooking:
			exitSequence_Microwave_Operation_TempStatus_StartCooking();
			break;
		case microwave_Operation_TempStatus_WaitForClosedDoor:
			exitSequence_Microwave_Operation_TempStatus_WaitForClosedDoor();
			break;
		case microwave_Operation_TempStatus_WaitForStart:
			exitSequence_Microwave_Operation_TempStatus_WaitForStart();
			break;
		case microwave_Operation_TempStatus_Beeping:
			exitSequence_Microwave_Operation_TempStatus_Beeping();
			break;
		case microwave_Operation_TempStatus_Finished:
			exitSequence_Microwave_Operation_TempStatus_Finished();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case microwave_Operation_DoorStatus_DoorClosed:
			exitSequence_Microwave_Operation_DoorStatus_DoorClosed();
			break;
		case microwave_Operation_DoorStatus_DoorOpen:
			exitSequence_Microwave_Operation_DoorStatus_DoorOpen();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region TempStatus */
	private void exitSequence_Microwave_Operation_TempStatus() {
		switch (stateVector[0]) {
		case microwave_Operation_TempStatus_High:
			exitSequence_Microwave_Operation_TempStatus_High();
			break;
		case microwave_Operation_TempStatus_Low:
			exitSequence_Microwave_Operation_TempStatus_Low();
			break;
		case microwave_Operation_TempStatus_TempSlection:
			exitSequence_Microwave_Operation_TempStatus_TempSlection();
			break;
		case microwave_Operation_TempStatus_Timer_r1_TimeSelection:
			exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimeSelection();
			break;
		case microwave_Operation_TempStatus_Timer_r1_TimerEntry:
			exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimerEntry();
			break;
		case microwave_Operation_TempStatus_Countdown:
			exitSequence_Microwave_Operation_TempStatus_Countdown();
			break;
		case microwave_Operation_TempStatus_StartCooking:
			exitSequence_Microwave_Operation_TempStatus_StartCooking();
			break;
		case microwave_Operation_TempStatus_WaitForClosedDoor:
			exitSequence_Microwave_Operation_TempStatus_WaitForClosedDoor();
			break;
		case microwave_Operation_TempStatus_WaitForStart:
			exitSequence_Microwave_Operation_TempStatus_WaitForStart();
			break;
		case microwave_Operation_TempStatus_Beeping:
			exitSequence_Microwave_Operation_TempStatus_Beeping();
			break;
		case microwave_Operation_TempStatus_Finished:
			exitSequence_Microwave_Operation_TempStatus_Finished();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_Microwave_Operation_TempStatus_Timer_r1() {
		switch (stateVector[0]) {
		case microwave_Operation_TempStatus_Timer_r1_TimeSelection:
			exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimeSelection();
			break;
		case microwave_Operation_TempStatus_Timer_r1_TimerEntry:
			exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimerEntry();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region DoorStatus */
	private void exitSequence_Microwave_Operation_DoorStatus() {
		switch (stateVector[1]) {
		case microwave_Operation_DoorStatus_DoorClosed:
			exitSequence_Microwave_Operation_DoorStatus_DoorClosed();
			break;
		case microwave_Operation_DoorStatus_DoorOpen:
			exitSequence_Microwave_Operation_DoorStatus_DoorOpen();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave__entry_Default() {
		enterSequence_Microwave_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Operation_TempStatus__entry_Default() {
		enterSequence_Microwave_Operation_TempStatus_TempSlection_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Operation_TempStatus_Timer_r1__entry_Default() {
		enterSequence_Microwave_Operation_TempStatus_Timer_r1_TimeSelection_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_Microwave_Operation_DoorStatus__entry_Default() {
		enterSequence_Microwave_Operation_DoorStatus_DoorClosed_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean microwave_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				exitSequence_Microwave_Init();
				enterSequence_Microwave_Operation_default();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.stop) {
					exitSequence_Microwave_Operation();
					enterSequence_Microwave_Init_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_High_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				if (sCInterface.low) {
					exitSequence_Microwave_Operation_TempStatus_High();
					enterSequence_Microwave_Operation_TempStatus_Low_default();
				} else {
					if (sCInterface.timer) {
						exitSequence_Microwave_Operation_TempStatus_High();
						enterSequence_Microwave_Operation_TempStatus_Timer_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_Low_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Operation_TempStatus_Low();
					enterSequence_Microwave_Operation_TempStatus_High_default();
				} else {
					if (sCInterface.timer) {
						exitSequence_Microwave_Operation_TempStatus_Low();
						enterSequence_Microwave_Operation_TempStatus_Timer_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_TempSlection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				if (sCInterface.high) {
					exitSequence_Microwave_Operation_TempStatus_TempSlection();
					enterSequence_Microwave_Operation_TempStatus_High_default();
				} else {
					if (sCInterface.low) {
						exitSequence_Microwave_Operation_TempStatus_TempSlection();
						enterSequence_Microwave_Operation_TempStatus_Low_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_Timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				if (((sCInterface.start) && ((getTime()>0 && getDoorState()==0)))) {
					exitSequence_Microwave_Operation_TempStatus_Timer();
					enterSequence_Microwave_Operation_TempStatus_StartCooking_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_Timer_r1_TimeSelection_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_TempStatus_Timer_react(try_transition)==false) {
				if (sCInterface.digit) {
					exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimeSelection();
					enterSequence_Microwave_Operation_TempStatus_Timer_r1_TimerEntry_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_Timer_r1_TimerEntry_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_TempStatus_Timer_react(try_transition)==false) {
				if (((sCInterface.digit) && (getTimeMultiplier()<4))) {
					exitSequence_Microwave_Operation_TempStatus_Timer_r1_TimerEntry();
					enterSequence_Microwave_Operation_TempStatus_Timer_r1_TimerEntry_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_Countdown_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				if (((timeEvents[0]) && ((getTime()>=1 && getDoorState()==0)))) {
					exitSequence_Microwave_Operation_TempStatus_Countdown();
					enterSequence_Microwave_Operation_TempStatus_Countdown_default();
				} else {
					if (sCInterface.open) {
						exitSequence_Microwave_Operation_TempStatus_Countdown();
						enterSequence_Microwave_Operation_TempStatus_WaitForClosedDoor_default();
					} else {
						if (getTime()==0) {
							exitSequence_Microwave_Operation_TempStatus_Countdown();
							enterSequence_Microwave_Operation_TempStatus_Beeping_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_StartCooking_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				exitSequence_Microwave_Operation_TempStatus_StartCooking();
				enterSequence_Microwave_Operation_TempStatus_Countdown_default();
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_WaitForClosedDoor_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				if (sCInterface.close) {
					exitSequence_Microwave_Operation_TempStatus_WaitForClosedDoor();
					enterSequence_Microwave_Operation_TempStatus_WaitForStart_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_WaitForStart_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				if (sCInterface.open) {
					exitSequence_Microwave_Operation_TempStatus_WaitForStart();
					enterSequence_Microwave_Operation_TempStatus_WaitForClosedDoor_default();
				} else {
					if (sCInterface.start) {
						exitSequence_Microwave_Operation_TempStatus_WaitForStart();
						enterSequence_Microwave_Operation_TempStatus_StartCooking_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_Beeping_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				if (timeEvents[1]) {
					exitSequence_Microwave_Operation_TempStatus_Beeping();
					enterSequence_Microwave_Operation_TempStatus_Finished_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_TempStatus_Finished_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (microwave_Operation_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_DoorStatus_DoorClosed_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.open) {
				exitSequence_Microwave_Operation_DoorStatus_DoorClosed();
				enterSequence_Microwave_Operation_DoorStatus_DoorOpen_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean microwave_Operation_DoorStatus_DoorOpen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.close) {
				exitSequence_Microwave_Operation_DoorStatus_DoorOpen();
				enterSequence_Microwave_Operation_DoorStatus_DoorClosed_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
