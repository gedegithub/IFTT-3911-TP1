1)
Le id d'une Airline doit être composée de 3 chiffres

context AirLine inv:
 	not self.line_id.toInteger().isUndefined()
	and self.line_id.length = 3
	and self.allInstances() -> isUnique(line_id)

2)
La partie alphabétique de l'ID d'un vol est unique à chaque compagnie et la partie numérique est unique à chaque vol au sein de la même compagnie [OCL]. 

context Airline inv:
	self.

3)L'aéroport de départ et d'arrivée d'un vol doit être différent [OCL].

context RouteDescription inv :
	not self.origin = self.destination

4)Tous les sièges d'une même section ont le même prix [OCL].

context section inv:
	self.seats->forAll(price = self.price)

5)Un port est identifié par trois lettres uniques à chaque port [OCL].

context Port inv:
 	not self.line_id.toInteger().isUndefined()
	and self.line_id.length = 3
	and self.allInstances() -> isUnique(line_id)
	

6)Un itinéraire ne peut pas durer plus de 21 jours [OCL].

context trajectory inv:
	self.arrivalDate - self.routeDescription.departureDate() <= 21

7)Chaque itinéraire visite une suite de ports fixes. Le port de départ et d'arrivée doit être le même [OCL].or
	
context trajectory inv:
	self.origin = self.destination

8)Un paquebot peut être assigné à plusieurs itinéraires tant qu'ils ne se chevauchent pas [OCL]

9)Toutes les cabines d'une même section ont le même prix 

context section inv:
	self.cabines->forAll(price = self.price)

10)Une gare est identifiée par trois lettres uniques à chaque gare [OCL]. 

context TrainStation inv:
 	not self.line_id.toInteger().isUndefined()
	and self.line_id.length = 3
	and self.allInstances() -> isUnique(line_id)

11-Le client peut réserver un siège disponible dans un vol (ligne) donné [OCL]. 

context Flight inv:
	self.craft.sections.seats()-> isUnique(reservation-s.client)

12-Le client peut réserver un siège disponible dans un voyage (train) donné [OCL].

context Trajectory inv:
	self.craft.sections.seats()-> isUnique(reservation.client)

14- Un siège réservé devient assigné à un passager une fois payé: le siège est donc confirmé [OCL]

Context Reservation-S :: makePayment()
	pre: self.estPaye = false
	post: self.estPaye = true
	
15-Le client peut réserver une cabine disponible pour un itinéraire donné [OCL].

context Trajectory inv:
	self.craft.sections.cabines()-> isUnique(reservation.client)
